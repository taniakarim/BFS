 def genRanPop(size_of_population):
    for i in range(size_of_population):
        ranPop = np.random.randint(0, nQ,nQ)
        # print(ranPop)
        pList.append(ranPop)
    return pList

 

"""# Fitness function"""

 

def aPair(singleParent,sizePop):
  attackingPair=0
  for refQueen in range(sizePop):
    for comQueen in range(refQueen+1,sizePop):
      if singleParent[refQueen]==singleParent[comQueen]:
        attackingPair+=1
  return attackingPair

 

def fitFunction(parentList,populationSize):
  non_attackingPair=populationSize*(populationSize-1)//2
  for parent in parentList:
      net_non_attackingPair=non_attackingPair-aPair(list(parent),populationSize)
      pFit.append(net_non_attackingPair)
  return pFit

 

"""#Selection function"""

 

def select_Parent(parentContainer, parentFit):
  sumScore=sum(parentFit)
  i=0
  for score in parentFit:
    parentFit[i]=round(score/sumScore,2)
    i+=1
  chromosome_1=list(parentFit).index(max(list(parentFit)))
  parentFit[list(parentFit).index(max(list(parentFit)))]=0
  chromosome_2=list(parentFit).index(max(list(parentFit)))
  return parentContainer[chromosome_1],parentContainer[chromosome_2]

 

"""#Crossover function"""

 

def crossoverChildren(c1, c2):  
  c1=list(c1)
  c2=list(c2)
  off1=np.array(c1[0:len(c1)//2]+c2[len(c2)//2:])
  off2=np.array(c2[0:len(c2)//2]+c1[len(c1)//2:])
  return off1,off2

 

"""###Mutation function"""

 

def mutateOffspring(child_to_mulate):
  print("\nBefore mutation: ")
  print(child_to_mulate)
  queenFlip=np.random.randint(0,nQ,1)
  child_to_mulate[queenFlip[0]]=np.random.randint(0,nQ,1)[0]
  print("\nAfter mutation: ")
  return child_to_mulate

 

"""### Genetic Algorithm Function"""

 

def GA(populationDatabase, nP,factor):
  fitness=fitFunction(population,nP)
  child1,child2=select_Parent(population, pFit)
  print("\nBefore performing crossover: \n",child1,"\n",child2)
  offspring1,offspring2=crossoverChildren(child1,child2)
  print("\nAfter performing crossover: \n",offspring1,"\n",offspring2)

 

  #New population...!
  populationDatabase=[]
  populationDatabase.append(offspring1)
  populationDatabase.append(offspring2)
  
  newFit=fitFunction(populationDatabase,nP)

 

  total_fitValue=newFit[-1] + newFit[-2]
  newFit[-1]=round(newFit[-1]/ total_fitValue,2)
  newFit[-2]=round(newFit[-2]/total_fitValue,2)
  newParent=[]
  if newFit[-1]>=newFit[-2]:
    if newFit[-1]>factor:
      populationDatabase[1]=mutateOffspring(populationDatabase[1])
      print(populationDatabase[1])
  else:
    if newFit[-2]>factor:
      populationDatabase[0]=mutateOffspring(populationDatabase[0])
      print(populationDatabase[0])
  return populationDatabase

 

"""Running the Genetic Algorithm function"""

 

# Number of Queens
nQ = int(input('Enter the #no. of Queens: '))

 

# Population size
pSize = int(input("Enter the \'Population Size\' :"))

 

#Population carrier list
pList = []

 

# Initial population...!!!

 

population=genRanPop(pSize)
print("\nInitial population: ")
parent_serial=1
for participator in population:
  print("Serial no-",parent_serial," : ",participator)
  parent_serial+=1

 

itr=int(input("\nEnter the iteration: \n"))
i=1
while itr>0:
#Fitness score...!
  pFit=[]

 

  mutation_threshold = 0.3
  print("\nIteration: ",i,end=" : ")
  population=GA(population, nQ, mutation_threshold)
  i+=1
  itr-=1